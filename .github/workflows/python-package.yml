# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==22.3.0 isort==5.10.1
      - name: Check linting with black
        run: |
          black --check .
      - name: Check imports order with isort
        run: |
          isort --check --profile=black .


  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python setup.py develop
        pip install -r requirements.txt
    - name: Test with pytest
      run: |
        pytest --cov
    - name: Dogfooding codecov-cli. Use codecov-cli to upload to codecov
      run: |
        codecovcli --auto-load-params-from githubactions do-upload -t ${{ secrets.CODECOV_TOKEN }} --plugin pycoverage --flag cli${{ matrix.python-version }}
    - name: Upload to codecov
      run: |
        pip install codecov
        codecov -t ${{ secrets.CODECOV_TOKEN }} -F python${{ matrix.python-version }}


  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Build executable with pyinstaller 
      run: |
        pip install pyinstaller
        pyinstaller -F codecov_cli/main.py
    - name: read version
      id: get_version
      run: |
        version=$(python setup.py --version)
        echo "version=$version"
        echo "version=$version" >> $GITHUB_OUTPUT
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        draft: true
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: pyinstaller-main-v${{ steps.get_version.outputs.version }}
        asset_path: ./dist/main
        asset_content_type: application/octet-stream
    